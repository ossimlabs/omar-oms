import java.util.concurrent.*

buildscript {
    repositories {
        maven { url ossimMavenProxy }
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails.plugins:hibernate5:${hibernate5PluginVersion}"
        classpath "gradle.plugin.com.github.erdi.webdriver-binaries:webdriver-binaries-gradle-plugin:${webdriverGradlePluginVersion}"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:${assetPipelineVersion}"
    }
}

plugins {
    id 'groovy'
    id 'java'
    id "com.github.ben-manes.versions" version "0.36.0"
    id "org.sonarqube" version "3.1"
}


subprojects { project ->
	boolean isGrailsApp = project.name.endsWith( '-app' )
	boolean isGrailsPlugin = project.name.endsWith( '-plugin' )
	boolean isGrailsProject = isGrailsApp || isGrailsPlugin

   project.ext {
     gitBranch = "master" //getCurrentGitBranch(project)
       //gitBranch = gitBranch == "HEAD" ? branchName : gitBranch
     buildVersionTag = gitBranch == "master" ? "RELEASE" : "SNAPSHOT"
    }

    project.version "${project.buildVersion}-${buildVersionTag}"
    project.group groupName

    apply plugin:"eclipse"
    apply plugin:"idea"

    if ( isGrailsProject )    
    {
        if ( isGrailsApp )
        {

            ext {
                dockerBuildDir = "${ rootProject.projectDir }/docker"
                jarDestination = "${ project.projectDir }/build/libs/${ project.name }-${ version }.jar"
            }

            // Copy the built jar to the docker directory
            task copyJarToDockerDir( type: Copy ) {
                doFirst {
                    println "Copying ${ jarDestination } to ${ dockerBuildDir }"
                }
                from jarDestination
                into dockerBuildDir
            }

            apply plugin:"org.grails.grails-web"
            apply plugin:"com.github.erdi.webdriver-binaries"
        }
        else if ( isGrailsPlugin ) 
        {
            apply plugin:"org.grails.grails-plugin"
            apply plugin:"org.grails.grails-plugin-publish"

            ext {
                jarDestination = "${project.projectDir}/build/libs/${project.name}-${version}.jar"
                mavenPublishUrl = getConfigurationProperty( 'MAVEN_UPLOAD_URL', 'mavenPublishUrl' )
                mavenRepoUsername = getConfigurationProperty( 'MAVEN_REPO_USERNAME', 'mavenRepoUsername')
                mavenRepoPassword = getConfigurationProperty( 'MAVEN_REPO_PASSWORD', 'mavenRepoPassword')
            }

            project.with {
              publishing {
                    publications {
                        "${project.name}" (MavenPublication) {
                            group "${groupName}-${buildVersionTag}"
                            groupId = "${groupName}-${buildVersionTag}"
                            version project.version
                            from components.java
                        }
                    }
                    repositories {
                    maven {
                        credentials {
                            username mavenRepoUsername
                            password mavenRepoPassword
                            }
                            url = mavenPublishUrl?.toLowerCase()
                        }
                    }                
                    jar.onlyIf {
                        !file(jarDestination).exists()
                    }
                }
            }
        }

        apply plugin:"asset-pipeline"
        apply plugin:"org.grails.grails-gsp"

        repositories {
            mavenLocal()
            maven { url ossimMavenProxy }
            maven { url "https://repo.grails.org/grails/core" }
        }

        configurations {
            developmentOnly
            runtimeClasspath {
                extendsFrom developmentOnly
            }
        }

        if ( isGrailsApp )
        {
            dependencyManagement {
                imports {
                    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
                }
            }
        }

        dependencies {
            developmentOnly("org.springframework.boot:spring-boot-devtools")
            compile "org.springframework.boot:spring-boot-starter-logging"
            compile "org.springframework.boot:spring-boot-autoconfigure"
            compile "org.grails:grails-core"
            compile "org.springframework.boot:spring-boot-starter-actuator"
            compile "org.springframework.boot:spring-boot-starter-tomcat"
            compile "org.grails:grails-web-boot"
            compile "org.grails:grails-logging"
            compile "org.grails:grails-plugin-rest"
            compile "org.grails:grails-plugin-databinding"
            compile "org.grails:grails-plugin-i18n"
            compile "org.grails:grails-plugin-services"
            compile "org.grails:grails-plugin-url-mappings"
            compile "org.grails:grails-plugin-interceptors"
            compile "org.grails.plugins:cache"
            compile "org.grails.plugins:async"
            compile "org.grails.plugins:scaffolding"
            compile "org.grails.plugins:gsp"
            compileOnly "io.micronaut:micronaut-inject-groovy"
            console "org.grails:grails-console"
            runtime "com.bertramlabs.plugins:asset-pipeline-grails:${assetPipelineVersion}"
            testCompile "org.grails:grails-gorm-testing-support"
            testCompile "org.mockito:mockito-core"
            testCompile "org.grails:grails-web-testing-support"

	    constraints {
      		implementation('org.apache.logging.log4j:log4j-core:2.17.1') {
        		because 'Log4j vulnerable to remote code execution and other critical security vulnerabilities'
      		}
      		implementation('org.apache.logging.log4j:log4j-api:2.17.1') {
        		because 'Log4j vulnerable to remote code execution and other critical security vulnerabilities'
      		}
      		implementation('ch.qos.logback:logback-classic:1.2.10') {
        		because 'Logback vulnerable to remote code execution and other critical security vulnerabilities'
      		}
      		implementation('ch.qos.logback:logback-core:1.2.10') {
        		because 'Logback vulnerable to remote code execution and other critical security vulnerabilities'
      		}
    	    }

            if ( isGrailsApp )
            {
                compile "org.grails.plugins:events"
                compile "org.grails.plugins:hibernate5"
                compile "org.hibernate:hibernate-core:${hibernateCoreVersion}"
                profile "org.grails.profiles:web"
                runtime "org.glassfish.web:el-impl:${glassfishWebVersion}"
                runtime "com.h2database:h2"
                runtime "org.apache.tomcat:tomcat-jdbc"
                runtime "javax.xml.bind:jaxb-api:${jaxbApiVersion}"
                testCompile "org.grails.plugins:geb"
                testCompile "org.seleniumhq.selenium:selenium-remote-driver:${seleniumVersion}"
                testCompile "org.seleniumhq.selenium:selenium-api:${seleniumVersion}"
                testCompile "org.seleniumhq.selenium:selenium-support:${seleniumVersion}"
                testRuntime "org.seleniumhq.selenium:selenium-chrome-driver:${seleniumVersion}"
                testRuntime "org.seleniumhq.selenium:selenium-firefox-driver:${seleniumVersion}"

                compile 'org.springframework.cloud:spring-cloud-starter-config'
                compile "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client"
            }
            else if ( isGrailsPlugin ) 
            {
                profile "org.grails.profiles:web-plugin"
                testCompile "org.grails:grails-plugin-testing"
            }
        }

        bootRun {
            jvmArgs(
                '-Dspring.output.ansi.enabled=always', 
                '-noverify', 
                '-XX:TieredStopAtLevel=1',
                '-Xmx1024m')
            sourceResources sourceSets.main
            String springProfilesActive = 'spring.profiles.active'
            systemProperty springProfilesActive, System.getProperty(springProfilesActive)
        }

        if ( isGrailsApp )
        {
            webdriverBinaries {
                chromedriver '2.45.0'
                geckodriver '0.24.0'
            }

            tasks.withType(Test) {
                systemProperty "geb.env", System.getProperty('geb.env')
                systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
                systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
                systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
            }
        }
        else if ( isGrailsPlugin )
        {
            // enable if you wish to package this plugin as a standalone application
            bootJar.enabled = false
            grailsPublish {
                // TODO: Provide values here
                user = 'user'
                key = 'key'
                githubSlug = 'foo/bar'
                license {
                    name = 'Apache-2.0'
                }
                title = "My Plugin"
                desc = "Full plugin description"
                developers = [johndoe:"John Doe"]
            }
        }

        assets {
            if ( isGrailsApp )
            {
                minifyJs = true
                minifyCss = true
            }
            else if ( isGrailsPlugin )
            {
                packagePlugin = true
            }
        }
    }    
}

String getConfigurationProperty( String envVar, String sysProp )
{
	System.getenv( envVar ) ?: project.findProperty( sysProp )
}

String getCurrentGitBranch(Project project) {
    def gitBranch = "Unknown branch"
    try {
        def workingDir = new File("${project.projectDir}")
        def result = 'git rev-parse --abbrev-ref HEAD'.execute(null, workingDir)
        result.waitFor()
        if (result.exitValue() == 0) {
            gitBranch = result.text.trim()
        }
    } catch (e) {
        e.printStackTrace()
    }
    return gitBranch
}
