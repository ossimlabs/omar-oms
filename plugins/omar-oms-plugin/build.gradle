buildscript {
  ext {
    grailsVersion = project.grailsVersion
    baseImage = ""
  }
  if(System.env.OMAR_COMMON_PROPERTIES)
  {
    apply from: System.env.OMAR_COMMON_PROPERTIES
  }
  repositories {
    maven { url "${ossimMavenProxy}" }
    if( !System.env.WWW_CONNECTED || Boolean.parseBoolean( System.env.WWW_CONNECTED ) ) {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
  }
  dependencies {
    classpath "org.grails:grails-gradle-plugin:$grailsVersion"
    classpath "com.bertramlabs.plugins:asset-pipeline-gradle:$assetPipelineGradleV"
  }
}

plugins {
    id "com.github.ben-manes.versions" version "0.17.0"
    id "org.sonarqube" version "2.6.2"
}

apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "org.grails.grails-plugin"
apply plugin: "org.grails.grails-plugin-publish"
apply plugin: "org.grails.grails-gsp"
apply plugin: "asset-pipeline"

apply plugin: "java"
apply plugin: "maven-publish"

group "io.ossim.omar.plugins"

ext {
  grailsVersion = project.grailsVersion
  gradleWrapperVersion = project.gradleWrapperVersion
}

repositories {
  maven { url "${ossimMavenProxy}" }
  if( !System.env.WWW_CONNECTED || Boolean.parseBoolean( System.env.WWW_CONNECTED ) ) {
    mavenLocal()
    // this is for JAI.  Must be before the mavenCentral and stuff.
    mavenCentral()
    maven { url "https://dl.bintray.com/ajay-kumar/plugins" }
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "http://download.osgeo.org/webdav/geotools" }
  }
}

 dependencyManagement {
   imports {
     mavenBom "org.springframework.cloud:spring-cloud-starter-parent:${springCloudDependencyV}"
   }
   applyMavenExclusions false
 }

grails {
  plugins {
    compile project(':omar-core-plugin')
    // compile project(':omar-openlayers-plugin')
  }
}

dependencies {
/*
  if ( System.getenv('O2_DEV_HOME')) {
    compile project(':omar-core-plugin')
    compile project(':omar-openlayers-plugin')
  } else {
    compile(group: "io.ossim.omar.plugins", name: "omar-openlayers-plugin", version: "1.0.0-${buildVersionTag}", changing: jarArtifactsChanging)
    compile(group: "io.ossim.omar.plugins", name: "omar-core-plugin", version: "1.1.0-${buildVersionTag}", changing: jarArtifactsChanging)
  }
*/
  compile "javax.media:jai_core:1.1.3"
  compile "javax.media:jai_codec:1.1.3"
  compile "javax.media:jai_imageio:1.1"
  compile "commons-pool:commons-pool:1.6"
  compile "org.ossim:joms:1.9.0-${buildVersionTag}"
  compile "org.grails:grails-core"
  compile "org.grails:grails-web-boot"
  compile "org.grails:grails-logging"
  compile "org.grails:grails-plugin-rest"
  compile "org.grails:grails-plugin-databinding"
  compile "org.grails:grails-plugin-i18n"
  compile "org.grails:grails-plugin-services"
  compile "org.grails:grails-plugin-url-mappings"
  compile "org.grails:grails-plugin-interceptors"
  compile "org.springframework.boot:spring-boot-starter-web"
  compile "org.springframework.boot:spring-boot-starter-logging"
  compile "org.springframework.boot:spring-boot-autoconfigure"
  compile "org.springframework.boot:spring-boot-starter-actuator"
  compile "org.springframework.boot:spring-boot-starter-tomcat"
  //compile "org.springframework.cloud:spring-cloud-starter-zipkin"
  compile "org.grails.plugins:cache"
  compile "org.grails.plugins:async"
  compile "org.grails.plugins:scaffolding"
  compile "org.grails.plugins:gsp"
  console "org.grails:grails-console"
  profile "org.grails.profiles:web-plugin"
  provided "org.grails:grails-plugin-services"
  provided "org.grails:grails-plugin-domain-class"
  runtime "com.bertramlabs.plugins:asset-pipeline-grails:${assetPipelineGrailsV}"
  testCompile "org.grails:grails-gorm-testing-support"
  testCompile "org.grails:grails-plugin-testing"
  testCompile "org.grails.plugins:geb"
  testCompile "org.grails:grails-web-testing-support"
  testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:${seleniumHtmlUnitDriverV}"
  testRuntime "net.sourceforge.htmlunit:htmlunit:${htmlUnitV}"
  testCompile "org.grails:grails-test-mixins:3.3.0"

}

assets {
  packagePlugin = true
}

grailsPublish {
  // TODO: Provide values here
  user = "user"
  key = "key"
  githubSlug = "foo/bar"
  license {
    name = "Apache-2.0"
  }
  title = "My Plugin"
  desc = "Full plugin description"
  developers = [johndoe:"John Doe"]
  portalUser = ""
  portalPassword = ""
}

/*
publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
    }
  }
}
*/
