buildscript {
    ext {
        grailsVersion = project.grailsVersion
        baseImage = "omar-ossim-base"
    dockerFile ="docker/Dockerfile"
     dockerStatementsOverride = {
       [
          "FROM ${project.dockerNamespaceUrl}${project.ext.baseImage}:${project.dockerAppTag}",
          """ENV SPRING_CLOUD_CONFIG_ENABLED=true \\
    SPRING_CLOUD_DISCOVERY_ENABLED=true \\
    HOME=/home/omar""",
          "COPY run.sh \$HOME/run.sh",
          "COPY ${project.name}-${buildVersion}-${buildVersionTag}.jar \$HOME",
          "USER root",
          """RUN yum -y install nss_wrapper fuse fuse-libs libevent curl && \\
    yum clean all && \\
    curl -k -s "https://s3.amazonaws.com/ossimlabs/dependencies/riofs/riofs" -o /usr/bin/riofs && \\
    curl -k -s "https://s3.amazonaws.com/ossimlabs/dependencies/goofys/goofys" -o /usr/bin/goofys && \\
    chmod +x /usr/bin/goofys && \\
    mkdir -p /s3 && chown -R 1001:0 /s3 && chmod 777 /s3 && \\
    chmod ugo+x /usr/bin/riofs && \\
    echo "user_allow_other" > /etc/fuse.conf && \\
    chown -R 1001:0 \$HOME && \\
    chmod +x \$HOME/run.sh && \\
    find \$HOME -type d -exec chmod g+x {} +""",
          "USER 1001",
          "WORKDIR \$HOME",
          "EXPOSE 8080",
          "CMD \$HOME/run.sh"
       ]
     }
    }
    if(System.env.OMAR_COMMON_PROPERTIES)
    {
        apply from: System.env.OMAR_COMMON_PROPERTIES
    }
    repositories {
        mavenLocal()
        maven { url "${ossimMavenProxy}" }
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:${assetPipelineGradleV}"
    }
}

plugins {
    id "com.github.ben-manes.versions" version "0.17.0"
    id "org.sonarqube" version "2.6.2"
}

group "io.ossim.omar.apps"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"org.grails.grails-web"
apply plugin:"org.grails.grails-gsp"
apply plugin:"asset-pipeline"

apply plugin: "java"
apply plugin: "maven-publish"

ext {
    grailsVersion = project.grailsVersion
    gradleWrapperVersion = project.gradleWrapperVersion
}

assets {
  minifyJs = true
  minifyCss = true
  includes = ["fonts/*"]
  excludes = ["**/*-debug.js", "**/*-deps.js", "**/*.gz", "**/*.txt", "**/*.less", "**/*.html", "**/i18n/**", "**/",
      ".grunt/**", "**/locale/**", "webjars/jquery/2.1.4/src/intro.js", "webjars/jquery/2.1.4/src/outro.js"]
}

repositories {
  mavenLocal()
  maven { url "${ossimMavenProxy}" }
  maven { url "https://repo.grails.org/grails/core" }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-starter-parent:Dalston.SR5"
    }
    applyMavenExclusions false
}

grails {
  plugins {
        compile project(':omar-oms-plugin')
        compile project(':omar-openlayers-plugin')
  }
}

dependencies {
/*
    if ( System.getenv('O2_DEV_HOME')) {
        compile project(':omar-oms-plugin')
    } else {
        compile(group: "io.ossim.omar.plugins", name: "omar-oms-plugin", version: "1.1.0-${buildVersionTag}", changing: jarArtifactsChanging)
    }
*/

    compile "de.codecentric:spring-boot-admin-starter-client:${springBootAdminStarterClientV}"

    compile "org.springframework.cloud:spring-cloud-starter-config"
    compile "org.springframework.cloud:spring-cloud-starter-eureka"
    compile "org.springframework.boot:spring-boot-starter-web"
    //compile "org.springframework.cloud:spring-cloud-starter-zipkin"

    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:events"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:${hibernateCoreV}"
    compile "org.grails.plugins:gsp"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtime "org.glassfish.web:el-impl:${elImplV}"
    runtime "com.h2database:h2"
    runtime "org.apache.tomcat:tomcat-jdbc"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:${assetPipelineGrailsV}"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.grails.plugins:geb"
    testCompile "org.grails:grails-web-testing-support"
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:${seleniumHtmlUnitDriverV}"
    testRuntime "net.sourceforge.htmlunit:htmlunit:${htmlUnitV}"
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
    }
  }
}

bootRun {
    jvmArgs = [
    ]
}
